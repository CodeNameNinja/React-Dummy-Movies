{"version":3,"sources":["components/AddMovie.module.css","components/Movie.module.css","components/MoviesList.module.css","components/Movie.js","components/MoviesList.js","components/AddMovie.js","App.js","index.js"],"names":["module","exports","Movie","props","className","classes","movie","title","releaseDate","openingText","MovieList","movies","map","key","id","AddMovie","titleRef","useRef","openingTextRef","releaseDateRef","onSubmit","event","preventDefault","current","value","onAddMovie","control","htmlFor","type","ref","rows","App","useState","setMovies","isLoading","setIsLoading","error","setError","fetchMoviesHandler","useCallback","a","fetch","response","ok","Error","json","data","loadedMovies","push","message","useEffect","content","length","MoviesList","addMovieHandler","method","body","JSON","stringify","headers","Fragment","onClick","ReactDOM","render","document","getElementById"],"mappings":"6HACAA,EAAOC,QAAU,CAAC,QAAU,4B,qBCA5BD,EAAOC,QAAU,CAAC,MAAQ,uB,gBCA1BD,EAAOC,QAAU,CAAC,cAAc,kC,+MCajBC,EAVD,SAACC,GACb,OACE,wBAAIC,UAAWC,IAAQC,OACrB,4BAAKH,EAAMI,OACX,4BAAKJ,EAAMK,aACX,2BAAIL,EAAMM,e,gBCWDC,EAfG,SAACP,GACjB,OACE,wBAAIC,UAAWC,IAAQ,gBACpBF,EAAMQ,OAAOC,KAAI,SAACN,GAAD,OAChB,kBAAC,EAAD,CACEO,IAAKP,EAAMQ,GACXP,MAAOD,EAAMC,MACbC,YAAaF,EAAME,YACnBC,YAAaH,EAAMG,mB,gBC6BdM,MAtCf,SAAkBZ,GAChB,IAAMa,EAAWC,iBAAO,IAClBC,EAAiBD,iBAAO,IACxBE,EAAiBF,iBAAO,IAgB9B,OACE,0BAAMG,SAfR,SAAuBC,GACrBA,EAAMC,iBAIN,IAAMhB,EAAQ,CACZC,MAAOS,EAASO,QAAQC,MACxBf,YAAaS,EAAeK,QAAQC,MACpChB,YAAaW,EAAeI,QAAQC,OAGtCrB,EAAMsB,WAAWnB,KAKf,yBAAKF,UAAWC,IAAQqB,SACtB,2BAAOC,QAAQ,SAAf,SACA,2BAAOC,KAAK,OAAOd,GAAG,QAAQe,IAAKb,KAErC,yBAAKZ,UAAWC,IAAQqB,SACtB,2BAAOC,QAAQ,gBAAf,gBACA,8BAAUG,KAAK,IAAIhB,GAAG,eAAee,IAAKX,KAE5C,yBAAKd,UAAWC,IAAQqB,SACtB,2BAAOC,QAAQ,QAAf,gBACA,2BAAOC,KAAK,OAAOd,GAAG,OAAOe,IAAKV,KAEpC,+C,MCyCSY,MAxEf,WACE,MAA4BC,mBAAS,IAArC,mBAAOrB,EAAP,KAAesB,EAAf,KACA,EAAkCD,oBAAS,GAA3C,mBAAOE,EAAP,KAAkBC,EAAlB,KACA,EAA0BH,mBAAS,MAAnC,mBAAOI,EAAP,KAAcC,EAAd,KAEMC,EAAqBC,sBAAW,sBAAC,kCAAAC,EAAA,6DACrCL,GAAa,GACbE,EAAS,MAF4B,kBAIZI,MACrB,oEALiC,WAI7BC,EAJ6B,QAOrBC,GAPqB,sBAQ3B,IAAIC,MAAM,yBARiB,wBAUhBF,EAASG,OAVO,QAYnC,IAAWhC,KAFLiC,EAV6B,OAW7BC,EAAe,GACHD,EAChBC,EAAaC,KAAb,2BAAuBF,EAAKjC,IAA5B,IAAkCC,GAAID,KAExCoB,EAAUc,GAfyB,kDAiBnCV,EAAS,KAAIY,SAjBsB,QAmBrCd,GAAa,GAnBwB,0DAoBpC,IAEHe,qBAAU,WACRZ,MACC,CAACA,IAEJ,IAAIa,EAAU,+CACVxC,EAAOyC,OAAS,IAClBD,EAAU,kBAACE,EAAD,CAAY1C,OAAQA,KAE5ByB,IACFe,EAAU,2BAAIf,IAEZF,IACFiB,EAAU,0CAGZ,IAAMG,EAAe,uCAAG,WAAOhD,GAAP,eAAAkC,EAAA,sEACCC,MACrB,mEACA,CACEc,OAAQ,OACRC,KAAMC,KAAKC,UAAUpD,GACrBqD,QAAS,CACP,eAAgB,sBAPA,WAChBjB,EADgB,QAWTC,GAXS,iEAcHD,EAASG,OAdN,cAetBP,IAfsB,2CAAH,sDAiBrB,OACE,kBAAC,IAAMsB,SAAP,KACE,iCACE,kBAAC,EAAD,CAAUnC,WAAY6B,KAExB,iCACE,4BAAQO,QAASvB,GAAjB,iBAEF,iCAAUa,KCnEhBW,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.9cf8fc5c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"control\":\"AddMovie_control__2JGEi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"movie\":\"Movie_movie__1WhZe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"movies-list\":\"MoviesList_movies-list__31KgF\"};","import React from 'react';\n\nimport classes from './Movie.module.css';\n\nconst Movie = (props) => {\n  return (\n    <li className={classes.movie}>\n      <h2>{props.title}</h2>\n      <h3>{props.releaseDate}</h3>\n      <p>{props.openingText}</p>\n    </li>\n  );\n};\n\nexport default Movie;\n","import React from 'react';\n\nimport Movie from './Movie';\nimport classes from './MoviesList.module.css';\n\nconst MovieList = (props) => {\n  return (\n    <ul className={classes['movies-list']}>\n      {props.movies.map((movie) => (\n        <Movie\n          key={movie.id}\n          title={movie.title}\n          releaseDate={movie.releaseDate}\n          openingText={movie.openingText}\n        />\n      ))}\n    </ul>\n  );\n};\n\nexport default MovieList;\n","import React, { useRef } from 'react';\n\nimport classes from './AddMovie.module.css';\n\nfunction AddMovie(props) {\n  const titleRef = useRef('');\n  const openingTextRef = useRef('');\n  const releaseDateRef = useRef('');\n\n  function submitHandler(event) {\n    event.preventDefault();\n\n    // could add validation here...\n\n    const movie = {\n      title: titleRef.current.value,\n      openingText: openingTextRef.current.value,\n      releaseDate: releaseDateRef.current.value,\n    };\n\n    props.onAddMovie(movie);\n  }\n\n  return (\n    <form onSubmit={submitHandler}>\n      <div className={classes.control}>\n        <label htmlFor='title'>Title</label>\n        <input type='text' id='title' ref={titleRef} />\n      </div>\n      <div className={classes.control}>\n        <label htmlFor='opening-text'>Opening Text</label>\n        <textarea rows='5' id='opening-text' ref={openingTextRef}></textarea>\n      </div>\n      <div className={classes.control}>\n        <label htmlFor='date'>Release Date</label>\n        <input type='text' id='date' ref={releaseDateRef} />\n      </div>\n      <button>Add Movie</button>\n    </form>\n  );\n}\n\nexport default AddMovie;\n","import React, { useState, useEffect, useCallback } from \"react\";\n\nimport MoviesList from \"./components/MoviesList\";\nimport AddMovie from \"./components/AddMovie\";\nimport \"./App.css\";\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const fetchMoviesHandler = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(\n        \"https://dummymovie-96eb2-default-rtdb.firebaseio.com/movies.json\"\n      );\n      if (!response.ok) {\n        throw new Error(\"Something went wrong.\");\n      }\n      const data = await response.json();\n      const loadedMovies = [];\n      for (const key in data) {\n        loadedMovies.push({ ...data[key], id: key });\n      }\n      setMovies(loadedMovies);\n    } catch (err) {\n      setError(err.message);\n    }\n    setIsLoading(false);\n  }, []);\n\n  useEffect(() => {\n    fetchMoviesHandler();\n  }, [fetchMoviesHandler]);\n\n  let content = <p>Found no Movies.</p>;\n  if (movies.length > 0) {\n    content = <MoviesList movies={movies} />;\n  }\n  if (error) {\n    content = <p>{error}</p>;\n  }\n  if (isLoading) {\n    content = <p>Loading...</p>;\n  }\n\n  const addMovieHandler = async (movie) => {\n    const response = await fetch(\n      \"https://dummymovie-96eb2-default-rtdb.firebaseio.com/movies.json\",\n      {\n        method: \"POST\",\n        body: JSON.stringify(movie),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      }\n    );\n    if(!response.ok){\n      return\n    }\n    const data = await response.json();\n    fetchMoviesHandler();\n  };\n  return (\n    <React.Fragment>\n      <section>\n        <AddMovie onAddMovie={addMovieHandler} />\n      </section>\n      <section>\n        <button onClick={fetchMoviesHandler}>Fetch Movies</button>\n      </section>\n      <section>{content}</section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}